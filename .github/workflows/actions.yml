name: merging-rules
on:
   pull_request:
      branches:
      - main
jobs:
  restrict-to-merge-branch-main:
   runs-on: ubuntu-latest
   steps:
     - name: Check merge branch
       if: github.event.pull_request.base.ref == 'main'
       run: |
         if [ "${{ github.event.pull_request.head.ref }}" != "release/QA" ]; then
           echo "Merges to main are only allowed from the release/QA branch."
           exit 1
         fi
  commits-messages-check-job:
    runs-on: ubuntu-latest
    name: commit-message-validation
    steps:
      - name: checkout-repo
        uses: actions/checkout@v3
      - name: check-commits
        run: |
          echo "$(git branch)"
          regex="^(fix|feat|chore):\\s+[a-zA-Z0-9 ]+\\S$"
          source_branch="${{ github.event.pull_request.head.ref }}"
          target_branch="${{ github.event.pull_request.base.ref }}"
          git fetch origin $source_branch $target_branch
          commits=$(git log origin/$target_branch..origin/$source_branch --oneline --pretty=format:"%s")
          while IFS= read -r commit; do
              echo $commit
              if [[ "$commit" =~ $regex ]]; then
                  echo "The commits are valid"
              else
                  echo "The commit: $commit is not valid"
                  exit 1
              fi
          done <<< "$commits"
      - name: success-commits
        if: success()
        run: echo "All commits are valid"
  pre-commit:
    runs-on: ubuntu-latest
    name: pre-commit-validation
    steps:
      - name: checkout-repo
        uses: actions/checkout@v3
      - name: pre-commit-apt-install
        run: |
          apt install pre-commit
      - name: pre-commit-install
        run: pre-commit install
      - name: run-pre-commit-hooks
        run: pre-commit run --all-files
